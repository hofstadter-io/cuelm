// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/apimachinery/pkg/api/meta

package meta

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

#ListMetaAccessor: _

// List lets you work with list metadata from any of the versioned or
// internal API objects. Attempting to set or retrieve a field on an object that does
// not support that field will be a no-op and return a default value.
#List: metav1.#ListInterface

// Type exposes the type and APIVersion of versioned or internal API objects.
#Type: metav1.#Type

// MetadataAccessor lets you work with object and list metadata from any of the versioned or
// internal API objects. Attempting to set or retrieve a field on an object that does
// not support that field (Name, UID, Namespace on lists) will be a no-op and return
// a default value.
//
// MetadataAccessor exposes Interface in a way that can be used with multiple objects.
#MetadataAccessor: _

#RESTScopeName: string // #enumRESTScopeName

#enumRESTScopeName:
	#RESTScopeNameNamespace |
	#RESTScopeNameRoot

#RESTScopeNameNamespace: #RESTScopeName & "namespace"
#RESTScopeNameRoot:      #RESTScopeName & "root"

// RESTScope contains the information needed to deal with REST resources that are in a resource hierarchy
#RESTScope: _

// RESTMapping contains the information needed to deal with objects of a specific
// resource and kind in a RESTful manner.
#RESTMapping: {
	// Resource is the GroupVersionResource (location) for this endpoint
	Resource: schema.#GroupVersionResource

	// GroupVersionKind is the GroupVersionKind (data format) to submit to this endpoint
	GroupVersionKind: schema.#GroupVersionKind

	// Scope contains the information needed to deal with REST Resources that are in a resource hierarchy
	Scope: #RESTScope
}

// RESTMapper allows clients to map resources to kind, and map kind and version
// to interfaces for manipulating those objects. It is primarily intended for
// consumers of Kubernetes compatible REST APIs as defined in docs/devel/api-conventions.md.
//
// The Kubernetes API provides versioned resources and object kinds which are scoped
// to API groups. In other words, kinds and resources should not be assumed to be
// unique across groups.
//
// TODO: split into sub-interfaces
#RESTMapper: _

// ResettableRESTMapper is a RESTMapper which is capable of resetting itself
// from discovery.
// All rest mappers that delegate to other rest mappers must implement this interface and dynamically
// check if the delegate mapper supports the Reset() operation.
#ResettableRESTMapper: _
